type: edu
files:
- name: src/index.html
  visible: true
  text: |-
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="utf-8">
        <title>Hello, World!</title>
    </head>
    <body>

    </body>
    </html>
  learner_created: false
- name: test/test.js
  visible: false
  text: |
    const puppeteer = require('puppeteer');
    const path = require('path');
    // '..' since we're in the hstest/ subdirectory; learner is supposed to have src/index.html
    const pagePath = 'file://' + path.resolve(__dirname, '../src/index.html');

    const hs = require('hs-test-web');

    const sleep = (ms) => new Promise(res => setTimeout(res, ms));

    async function stageTest() {
        const browser = await puppeteer.launch({
            headless: false,
            defaultViewport: null,
            args:['--start-maximized']
        });

        const page = await browser.newPage();
        await page.goto(pagePath);

        page.on('console', msg => console.log(msg.text()));

        let selector = 'button[class="open-window"]';
        page.evaluate((selector) => document.querySelector(selector).click(), selector);

        await sleep(1000);

        let result = await hs.testPage(page,
            // Test #1 - check if the document has the header
            () => {
                let headers = document.getElementsByTagName('header');

                if (headers === null || headers.length === 0) {
                    return hs.wrong('Cannot find the header in the document.');
                } else if (headers.length > 1) {
                    return hs.wrong('Found more than one header in the document.');
                }

                return hs.correct();
            },

            // Test #2 - check if the document has at least one <nav> element
            () => {
                let nav = document.getElementsByTagName('nav');

                if (nav === null || nav.length === 0) {
                    return hs.wrong('Cannot find the nav element on your web page.');
                }

                return hs.correct();
            },

            // Test #3 - check if the document has the <h1> element
            () => {
                let headings1 = document.getElementsByTagName('h1');

                if (headings1 === null || headings1.length === 0) {
                    return hs.wrong('Cannot find h1 element on your web page.');
                }

                let header = headings1[0]
                let title = header.textContent || header.innerText;

                if (!title || title.length === 0) {
                    return hs.wrong('Cannot find a text within h1 element');
                }

                return hs.correct();
            },

            // Test #4 - check if the document has the <h1> element
            () => {
                let html = document.getElementsByTagName('html')[0];

                let margin = window.getComputedStyle(html).margin;
                if (margin !== '0px') {
                    return hs.wrong('It seems that you have not reset the default margin property');
                }

                let padding = window.getComputedStyle(html).padding;
                if (padding !== '0px') {
                    return hs.wrong('It seems that you have not reset the default padding property');
                }

                return hs.correct();
            },

            // Test #5 - check if the document has the <footer> element
            () => {
                let footers = document.getElementsByTagName('footer');

                if (footers === null || footers.length === 0) {
                    return hs.wrong('Cannot find the footer in the document.');
                } else if (footers.length > 1) {
                    return hs.wrong('Found more than one footer in the document.');
                }

                return hs.correct();
            },

            // Test #6 - check if the document has at least three section elements
            () => {
                let sections = document.getElementsByTagName('section');

                if (sections === null || sections.length < 3) {
                    return hs.wrong(`Cannot find tree sections elements. There are only ${sections.length}.`);
                }

                return hs.correct();
            },

            // Test #7 - check the "about me" section
            () => {
                let sections = document.getElementById('about');

                if (sections === null || sections.length < 1) {
                    return hs.wrong('Cannot find a section with the "about" id.');
                }

                return hs.correct();
            },

            // Test #8 - check the "portfolio" section
            () => {
                let sections = document.getElementById('portfolio');

                if (sections === null || sections.length < 1) {
                    return hs.wrong('Cannot find a section with the "portfolio" id.');
                }

                return hs.correct();
            },

            // Test #9 - check the "contacts" section
            () => {
                let sections = document.getElementById('contacts');

                if (sections === null || sections.length < 1) {
                    return hs.wrong('Cannot find a section with the "contacts" id.');
                }

                return hs.correct();
            },

            // Test #10 - check header and footer background colors
            () => {
                function getRealColor(elem) {
                    try {
                        while (elem) {
                            let color = window.getComputedStyle(elem).backgroundColor;
                            if (color !== "rgba(0, 0, 0, 0)") {
                                let match = color.match(/^rgba?\((\d+), (\d+), (\d+)(, [\d.]+)?\)$/i);
                                return {
                                    red: Number(match[1]),
                                    green: Number(match[2]),
                                    blue: Number(match[3]),
                                    hex: Number(match[1]) * 65536 + Number(match[2]) * 256 + Number(match[3])
                                };
                            }
                            elem = elem.parentElement;
                        }
                    } catch (e) {
                        return null;
                    }
                    return null;
                }

                let headers = document.getElementsByTagName('header');

                if (headers === null || headers.length === 0) {
                    return hs.wrong('Cannot find the header in the document.');
                } else if (headers.length > 1) {
                    return hs.wrong('Found more than one header in the document.');
                }

                let hasBackgroundImage = getComputedStyle(headers[0]).background.includes('url');

                let headerBack = getRealColor(headers[0]);
                let noCustomHeaderColor = headerBack === null || headerBack.hex === 0xFFFFFF;
                if (noCustomHeaderColor && !hasBackgroundImage) {
                    return hs.wrong("Looks like header's background color is not set. " +
                        "It should be an image or some non-white color.")
                }

                let footers = document.getElementsByTagName('footer');

                if (footers === null || footers.length === 0) {
                    return hs.wrong('Cannot find the footer in the document.');
                } else if (headers.length > 1) {
                    return hs.wrong('Found more than one footer in the document.');
                }

                hasBackgroundImage = getComputedStyle(footers[0]).background.includes('url');

                let footerBack = getRealColor(footers[0]);
                let noCustomFooterColor = footerBack === null || footerBack.hex === 0xFFFFFF;
                if (noCustomFooterColor && !hasBackgroundImage) {
                    return hs.wrong("Looks like footer's background color is not set. " +
                        "It should be an image or some non-white color.")
                }

                return hs.correct()
            },

            // Test #11 - check click button and show popup window
            () => {
                let buttons = document.getElementsByClassName('open-window');

                if (buttons === null || buttons.length === 0) {
                    return hs.wrong('Cannot find a button with the class "open-window" to open the pop-up window.');
                }

                let forms = document.getElementsByClassName('window');

                if (forms === null || forms.length === 0) {
                    return hs.wrong('Cannot find the element with the class "window".');
                }

                return hs.correct()
            },

            // Test #12 -  check that the page has a hamburger menu
            () => {
                let buttons = document.getElementsByClassName('hamburger');

                if (buttons === null || buttons.length === 0) {
                    return hs.wrong('Not find the hamburger menu on your page. Create it and set the "hamburger" class to the tag that wraps the menu elements.');
                }

                return hs.correct()
            },

            // Test #13
            () => {
                let burger = document.getElementsByClassName('hamburger')[0];

                let display = window.getComputedStyle(burger).display;
                let visibility = window.getComputedStyle(burger).visibility;

                if (window.innerWidth >= 900 && (display === 'none' || visibility === 'hidden')) {
                    return hs.correct()
                }

                return hs.wrong('The menu must not be hamburger when the screen width >= 900 px');
            }
        );

        await browser.close();
        return result;
    }


    jest.setTimeout(30000);
    test("Test stage", async () => {
            let result = await stageTest();
            if (result['type'] === 'wrong') {
                fail(result['message']);
            }
        }
    );
  learner_created: false
- name: src/css/style.css
  visible: true
  text: |-
    * {
        margin: 0;
        padding: 0;
    }

    body {
        position: absolute;
        height: fit-content;
        width: 100%;
    }

    .nav-list {
        position: relative;

        display: flex;
        flex-direction: row;

        justify-content: center;

        background-color: black;
    }

    .nav-item {
        position: relative;
        padding: 1.5% 2%;

        color: white;
        font-family: 'Nunito Sans', sans-serif;
        text-decoration: none;
        letter-spacing: 2px;
        text-transform: uppercase;
    }

    #home {
        background-color: white;
        color: black;
    }

    header {
        position: relative;

        height: 650px;
        width: 100%;

        background-image: url("../imgs/bg.jpg");
        background-size: 100% 100%;
    }

    .title {
        position: relative;
        top: 70%;
        left: 10%;
        width: fit-content;

        color: white;
        font-family: 'Rokkitt', serif;
        font-size: 250%;
        letter-spacing: 2px;
    }

    #about {
        position: relative;
        height: 650px;
        width: 100%;

        background-color: darkgray;
        display: flex;
        justify-content: center;
    }

    .about-text {
        position: relative;

        top: 0;
        bottom: 0;
        left: 0;
        right: 0;
        margin: auto 20% auto 10%;
    }



    #about-title {
        position: relative;

        font-family: 'Cardo', serif;
        font-size: 200%;

        left: 1%;
        margin: 5%;
    }

    #image {
        position: relative;
        width: 25%;
        height: 50%;

        margin: auto;
        left: 20%;
        top: -10%;
    }

    #photo {
        position: relative;
        height: 50%;

        top: 35%;
        left: 10%;
        margin: 0 5% 0 0;
    }

    #portfolio {
        position: relative;
        height: 500px;
        width: 100%;

        background-color: lightgray;
        text-align: center;
    }

    #portfolio-title, #contacts-title {
        padding: 2% 0;

        text-transform: uppercase;
        font-family: 'Antic Slab', serif;
        letter-spacing: 1px;
    }

    .works {
        position: relative;

        display: flex;
        justify-content: center;
    }

    .item {
        position: relative;

        background-color: white;
        width: 30%;

        margin: 0 1%;
    }

    .project-img {
        position: relative;

        width: 80%;
    }

    .project-title {
        margin-top: 1%;
    }

    .open-window {
        position: absolute;
        width: 100%;
        height: 100%;
        left: 0;

        z-index: 1;
        opacity: 0.3;
    }

    #contacts {
        position: relative;
        height: 230px;

        background-color: white;

        text-align: center;
    }

    .icons {
        width: 1%;

        margin: 2% 0.5%;
        opacity: 0.3;
    }

    footer {
        position: relative;

        background-color: black;

        width: 100%;
        height: 100px;

        text-align: center;
        color: white;
    }

    #author {
        padding: 1% 0 0 0;

        text-transform: uppercase;
        font-family: 'Antic Slab', serif;
        letter-spacing: 1px;

        font-size: 150%;
    }

    #year {
        font-family: 'Nunito Sans', sans-serif;
    }

    .gray-box {
        display: none;

        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;

        background-color: black;
        z-index: 1000;
        opacity: 0.6;
        filter: alpha(opacity=60);
    }

    .window {
        position: absolute;
        width: 600px;
        height: fit-content;
        left: 0;
        right: 0;
        margin: auto;

        background-color: white;

        text-align: center;

        border: black solid 3px;
        border-radius: 10px;

        padding-bottom: 10px;

        display: none;

        z-index: 1001;
    }

    .popup-title, .popup-text {
        color: gray;
    }

    .popup-title {
        margin: 20px;
    }

    .popup-text {
        margin: 10px;
    }

    .popup-button {
        background-color: black;
        color: white;

        width: 120px;
        height: 60px;

        font-size: 150%;
    }
  learner_created: true
- name: src/imgs/facebook.svg
  visible: true
  text: <svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m437
    0h-362c-41.351562 0-75 33.648438-75 75v362c0 41.351562 33.648438 75 75 75h151v-181h-60v-90h60v-61c0-49.628906
    40.371094-90 90-90h91v90h-91v61h91l-15 90h-76v181h121c41.351562 0 75-33.648438
    75-75v-362c0-41.351562-33.648438-75-75-75zm0 0"/></svg>
  learner_created: true
- name: src/imgs/instagram.svg
  visible: true
  text: "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n<!-- Generator: Adobe Illustrator\
    \ 16.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg\
    \ PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\"\
    >\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"\
    http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"169.063px\" height=\"\
    169.063px\" viewBox=\"0 0 169.063 169.063\" style=\"enable-background:new 0 0\
    \ 169.063 169.063;\"\n\t xml:space=\"preserve\">\n<g>\n\t<path d=\"M122.406,0H46.654C20.929,0,0,20.93,0,46.655v75.752c0,25.726,20.929,46.655,46.654,46.655h75.752\n\
    \t\tc25.727,0,46.656-20.93,46.656-46.655V46.655C169.063,20.93,148.133,0,122.406,0z\
    \ M154.063,122.407\n\t\tc0,17.455-14.201,31.655-31.656,31.655H46.654C29.2,154.063,15,139.862,15,122.407V46.655C15,29.201,29.2,15,46.654,15h75.752\n\
    \t\tc17.455,0,31.656,14.201,31.656,31.655V122.407z\"/>\n\t<path d=\"M84.531,40.97c-24.021,0-43.563,19.542-43.563,43.563c0,24.02,19.542,43.561,43.563,43.561s43.563-19.541,43.563-43.561\n\
    \t\tC128.094,60.512,108.552,40.97,84.531,40.97z M84.531,113.093c-15.749,0-28.563-12.812-28.563-28.561\n\
    \t\tc0-15.75,12.813-28.563,28.563-28.563s28.563,12.813,28.563,28.563C113.094,100.281,100.28,113.093,84.531,113.093z\"\
    />\n\t<path d=\"M129.921,28.251c-2.89,0-5.729,1.17-7.77,3.22c-2.051,2.04-3.23,4.88-3.23,7.78c0,2.891,1.18,5.73,3.23,7.78\n\
    \t\tc2.04,2.04,4.88,3.22,7.77,3.22c2.9,0,5.73-1.18,7.78-3.22c2.05-2.05,3.22-4.89,3.22-7.78c0-2.9-1.17-5.74-3.22-7.78\n\
    \t\tC135.661,29.421,132.821,28.251,129.921,28.251z\"/>\n</g>\n<g>\n</g>\n<g>\n\
    </g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n\
    </g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n</svg>\n"
  learner_created: true
- name: src/imgs/github.svg
  visible: true
  text: "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n<!-- Generator: Adobe Illustrator\
    \ 19.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<svg version=\"\
    1.1\" id=\"Capa_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"\
    \ x=\"0px\" y=\"0px\"\n\t viewBox=\"0 0 512 512\" style=\"enable-background:new\
    \ 0 0 512 512;\" xml:space=\"preserve\">\n<g>\n\t<g>\n\t\t<path d=\"M255.968,5.329C114.624,5.329,0,120.401,0,262.353c0,113.536,73.344,209.856,175.104,243.872\n\
    \t\t\tc12.8,2.368,17.472-5.568,17.472-12.384c0-6.112-0.224-22.272-0.352-43.712c-71.2,15.52-86.24-34.464-86.24-34.464\n\
    \t\t\tc-11.616-29.696-28.416-37.6-28.416-37.6c-23.264-15.936,1.728-15.616,1.728-15.616c25.696,1.824,39.2,26.496,39.2,26.496\n\
    \t\t\tc22.848,39.264,59.936,27.936,74.528,21.344c2.304-16.608,8.928-27.936,16.256-34.368\n\
    \t\t\tc-56.832-6.496-116.608-28.544-116.608-127.008c0-28.064,9.984-51.008,26.368-68.992c-2.656-6.496-11.424-32.64,2.496-68\n\
    \t\t\tc0,0,21.504-6.912,70.4,26.336c20.416-5.696,42.304-8.544,64.096-8.64c21.728,0.128,43.648,2.944,64.096,8.672\n\
    \t\t\tc48.864-33.248,70.336-26.336,70.336-26.336c13.952,35.392,5.184,61.504,2.56,68c16.416,17.984,26.304,40.928,26.304,68.992\n\
    \t\t\tc0,98.72-59.84,120.448-116.864,126.816c9.184,7.936,17.376,23.616,17.376,47.584c0,34.368-0.32,62.08-0.32,70.496\n\
    \t\t\tc0,6.88,4.608,14.88,17.6,12.352C438.72,472.145,512,375.857,512,262.353C512,120.401,397.376,5.329,255.968,5.329z\"\
    />\n\t</g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n\
    </g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n\
    </g>\n<g>\n</g>\n<g>\n</g>\n</svg>\n"
  learner_created: true
- name: src/js/script.js
  visible: true
  text: |-
    function getElementTop(element){
        let actualTop = element.offsetTop;
        let current = element.offsetParent;

        while (current !== null){
            actualTop += current.offsetTop;
            current = current.offsetParent;
        }

        return actualTop;
    }

    function show(id) {
        let grayBox = document.querySelector(".gray-box");
        let popUpWindow = document.getElementById(id);
        let portfolio = document.getElementById("portfolio-title");
        let scroll = document.getElementById("scroll");

        grayBox.style.display = "block";
        grayBox.style.height = document.body.clientHeight + "px";

        popUpWindow.style.display = "block";
        popUpWindow.style.top = getElementTop(portfolio) + "px";

        scroll.style.overflowY = "hidden";
    }

    function hide(id) {
        let grayBox = document.querySelector(".gray-box");
        let popUpWindow = document.getElementById(id);
        let scroll = document.getElementById("scroll");

        grayBox.style.display = "none";
        popUpWindow.style.display = "none";

        scroll.style.overflowY = "visible";
    }
  learner_created: true
- name: src/imgs/twitter.svg
  visible: true
  text: "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n<!-- Generator: Adobe Illustrator\
    \ 19.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<svg version=\"\
    1.1\" id=\"Capa_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"\
    \ x=\"0px\" y=\"0px\"\n\t viewBox=\"0 0 512 512\" style=\"enable-background:new\
    \ 0 0 512 512;\" xml:space=\"preserve\">\n<g>\n\t<g>\n\t\t<path d=\"M512,97.248c-19.04,8.352-39.328,13.888-60.48,16.576c21.76-12.992,38.368-33.408,46.176-58.016\n\
    \t\t\tc-20.288,12.096-42.688,20.64-66.56,25.408C411.872,60.704,384.416,48,354.464,48c-58.112,0-104.896,47.168-104.896,104.992\n\
    \t\t\tc0,8.32,0.704,16.32,2.432,23.936c-87.264-4.256-164.48-46.08-216.352-109.792c-9.056,15.712-14.368,33.696-14.368,53.056\n\
    \t\t\tc0,36.352,18.72,68.576,46.624,87.232c-16.864-0.32-33.408-5.216-47.424-12.928c0,0.32,0,0.736,0,1.152\n\
    \t\t\tc0,51.008,36.384,93.376,84.096,103.136c-8.544,2.336-17.856,3.456-27.52,3.456c-6.72,0-13.504-0.384-19.872-1.792\n\
    \t\t\tc13.6,41.568,52.192,72.128,98.08,73.12c-35.712,27.936-81.056,44.768-130.144,44.768c-8.608,0-16.864-0.384-25.12-1.44\n\
    \t\t\tC46.496,446.88,101.6,464,161.024,464c193.152,0,298.752-160,298.752-298.688c0-4.64-0.16-9.12-0.384-13.568\n\
    \t\t\tC480.224,136.96,497.728,118.496,512,97.248z\"/>\n\t</g>\n</g>\n<g>\n</g>\n\
    <g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n\
    <g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n\
    </svg>\n"
  learner_created: true
- name: src/imgs/close.svg
  visible: true
  learner_created: true
- name: src/imgs/menu.svg
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/137/stages/734/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Tue, 23 Mar 2021 01:29:22 UTC
record: -1
